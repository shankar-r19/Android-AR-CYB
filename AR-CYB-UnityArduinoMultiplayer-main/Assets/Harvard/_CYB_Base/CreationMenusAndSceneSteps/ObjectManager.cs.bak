using System.Collections;
using System.Collections.Generic;
using Microsoft.MixedReality.Toolkit.UI;
using Photon.Pun;
using Microsoft.MixedReality.Toolkit.Input;
using UnityEngine;
using TMPro;

public class ObjectManager : MonoBehaviourPun
{
    private Object[] objects;
    public GameObject menuParentPrefab;

    // TODO: Make this private and fix the hand menu so it doesn't need it
    public GameObject menuParent;
    // TODO: Make this private and fix the hand menu so it doesn't need it
    public bool neverOpened;
    public GameObject referenceSize;

    public GameObject addButton;
    public GameObject locationPlaceholder; // an empty object for determining the next shortcut button location

    private Vector3 newLinePos;
    private Vector3 buttonPos;
    private Vector3 startPos;
    private int newButtonID;
    List<GameObject> thumbnailList;
    List<GameObject> objectList;

    // TODO:readonly
    public bool isClosed = true;

    private void Start()
    {
        LoadAllObjects();

      //  menuParent = new GameObject("MENU");
        neverOpened = true;
        thumbnailList = new List<GameObject>();
        objectList = new List<GameObject>();
        newButtonID = 0;

        buttonPos = locationPlaceholder.transform.position;
        startPos = buttonPos;
        newLinePos = buttonPos;
    }

    private void Update()
    {
        // "O" keypress opens the MENU
        if (Input.GetKeyDown(KeyCode.O))
        {
            if (isClosed)
            {
                OpenMenu();
            } else
            {
                CloseMenu();
            }
        }
    }


    // Loads all objects in the "Resources/Objects" folder
    public void LoadAllObjects()
    {
        objects = Resources.LoadAll("Objects", typeof(GameObject));
    }

    // Instantiates all menu buttons and associated 3D objects then calls RearrangeButtons()
    public void OpenMenu()
    {
        PhotonView.Get(this).RPC("RPC_OpenMenu", RpcTarget.All);
    } 
    [PunRPC]
    public void RPC_OpenMenu() { 
        if (neverOpened)
        {
            // TODOIRNOW: make this networked
            // TODOIRNOW: maybe this isn't needed ?
            GameObject newMenuParent = (GameObject)Instantiate(menuParentPrefab, buttonPos + Vector3.right * .15f + Vector3.up * .15f, Quaternion.Euler(-90, 0, 0));
            newMenuParent.transform.parent = this.transform;
            menuParent = newMenuParent;

            foreach (var o in objects)
            {
                GameObject newButton = (GameObject)Instantiate(addButton, buttonPos, Quaternion.identity);
                newButton.transform.parent = menuParent.transform;
                //newButton.transform.localRotation.SetEulerAngles(-90, 90, 0);
                //newButton.name = newButtonID.ToString();
                newButton.name = o.name;



                if (newButton != null)
                {
                    thumbnailList.Add(newButton);
                }

                GameObject newObject = (GameObject)Instantiate(o, buttonPos + Vector3.forward * .05f, Quaternion.identity);

                // Delete photon stuff from this object because we won't need it
                foreach (var c in newObject.GetComponentsInChildren<PhotonTransformView>())
                    GameObject.Destroy(c);
                foreach (var c in newObject.GetComponentsInChildren<PhotonView>())
                    GameObject.Destroy(c);
                foreach (var c in newObject.GetComponentsInChildren<AtomicDataSwitch>())
                    GameObject.Destroy(c);

                newObject.transform.parent = newButton.transform;
                ResizeObject(newObject, 0.05f);
                //newObject.tag = "MenuObject";


                
                var iconAndText = newButton.transform.Find("IconAndText");
                var textMeshP = iconAndText.transform.Find("TextMeshPro");
                textMeshP.gameObject.SetActive(true);

                var tmp = textMeshP.gameObject.GetComponent<TextMeshPro>();

                if(o.name.Length < 10)
                {
                    tmp.text = o.name;
                }
                else
                {
                    tmp.text = o.name.Substring(0, 9) + "...";
                }



                newObject.name = o.name; // newButtonID.ToString();

                if (newObject != null)
                {
                    objectList.Add(newObject);
                }

                newButtonID++;

                ButtonScript newButtonScript = newButton.GetComponentInChildren<ButtonScript>();

                newButtonScript.myObjectManager = this;
            }
            RearrangeButtons();

            newMenuParent.transform.localRotation = Quaternion.Euler(-90, 0, 0) ;

            neverOpened = false;
        }

        if (!neverOpened)
        {
            menuParent.SetActive(true);
        }
        isClosed = false;
    }

    public void CloseMenu()
    {
        PhotonView.Get(this).RPC("RPC_CloseMenu", RpcTarget.All);
    }
    [PunRPC]
    public void RPC_CloseMenu() { 
        menuParent.SetActive(false);
        isClosed = true;
    }


    // Resizes the created object using the referenceSize object
    public void ResizeObject(GameObject obj, float scaleFactor)
    {
        Vector3 sizeCalculated = referenceSize.GetComponent<Renderer>().bounds.size;
        obj.transform.localScale = sizeCalculated * scaleFactor;
    }



    // gets the button name and compares with the name of the 3D object and instantiates the associated object when the plus button is pressed
    public void AddButtonPress(string buttonName)
    {
        SceneStepsManager.Instance.CreateAndConfigureNewObjectForScene_Model(
            buttonName, "Objects/" + buttonName,
            startPos + -1*this.transform.right * 0.3f,
            Quaternion.identity,
            //Vector3.one);
            referenceSize.GetComponent<Renderer>().bounds.size * 1f);
    }

    /*** was used for creating objects, but now creating is done elsewhere
    [PunRPC]
    private void RPC_CreateObject(string buttonName) 
    {
        //string prefabName = "Objects/" + buttonName;
        //GameObject newObject = PhotonNetwork.Instantiate(prefabName, startPos + Vector3.left * 0.3f, Quaternion.identity); //(GameObject)Instantiate(o, startPos + Vector3.left * 0.3f, Quaternion.identity);
        //newObject.name = buttonName;
        //ResizeObject(newObject, 1f);

        SceneStepsManager.ConfigureNewObjectForScene(newObject);
    }
    ****/

    //rearranges the menu buttons
    public void RearrangeButtons()
    {
        buttonPos = startPos;
        newLinePos = startPos;
        thumbnailList[0].transform.position = buttonPos;

        Vector3 dirRight = thumbnailList[0].transform.right;
        Vector3 dirDown = thumbnailList[0].transform.up * -1;

        if (thumbnailList.Count > 0)
        {
            for (int i = 1; i < thumbnailList.Count; i++)
            {
                if (i % 3 != 0)
                {
                    buttonPos += Vector3.right * .15f;
                    thumbnailList[i].transform.position = buttonPos;
                }

                if (i % 3 == 0)
                {
                    buttonPos = newLinePos + Vector3.down * .15f;
                    newLinePos = buttonPos;
                    thumbnailList[i].transform.position = newLinePos;
                }
            }

        }

    }
}