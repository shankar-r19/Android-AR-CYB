using System;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

using Microsoft.MixedReality.Toolkit.UI;
using Microsoft.MixedReality.Toolkit.UI.BoundsControl;

public enum SettingsType { DataChannel, RenameTooltip, MoveTooltipAnchor, Other }

[Serializable]
public class SettingsMenuButton
{
    public SettingsType type;
    public string text;
}

public class SettingsMenuController : MonoBehaviour
{

    [SerializeField]
    public GameObject settingsMenuprefab;
    [SerializeField]
    public GameObject settingsMenuLaunchButtonprefab;
    [SerializeField]
    public GameObject settingsMenuButtonprefab;
    GameObject menu;
    GameObject menuLaunchButton;

    public bool showingMenu;
    public bool menuPressedToggle;
    [SerializeField]
    public SettingsMenuButton[] buttons;
    int numButtonRows;

    private string newTooltipText;
    //private Transform tooltipTransform;

    public GameObject anchorObject;

    // Start is called before the first frame update
    void Start()
    {
        if (anchorObject == null)
            anchorObject = this.gameObject;
        Vector3 settingsLaunchButtonPosition = anchorObject.transform.position + new Vector3(0f, 0.1f, 0f);
        menuLaunchButton = Instantiate(settingsMenuLaunchButtonprefab, settingsLaunchButtonPosition, anchorObject.transform.rotation);
        menuLaunchButton.transform.parent = this.transform;

        var interactable = menuLaunchButton.GetComponent<Interactable>();
        interactable.OnClick.AddListener(ToggleSettingsMenu);
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public void ToggleSettingsMenu()
    {
        if (!showingMenu)
        {
            menu = Instantiate(settingsMenuprefab,
                anchorObject.transform.position + new Vector3(0f, 0.2f, 0f),
                Quaternion.identity);

            //menu.transform.localScale = new Vector3(1, 1, 1);
            menu.transform.parent = this.transform;

            FormatMenu();
            FormatButtons();
            showingMenu = true;
        }
        else
        {
            Destroy(menu);
            showingMenu = false;
        }
    }

    void FormatMenu()
    {
        //position the menu to the left of the Settings button
        //menu.transform.position = transform.position - new Vector3(0f, 0f, .7f);
        //menu.transform.rotation = transform.rotation;
        menu.transform.localScale = new Vector3(18, 18, 5);
        menu.transform.localRotation = Quaternion.Euler(new Vector3(0f, 0f, 0f));
        
        //menu.transform.localScale = new Vector3(4, 3, 2);

        // instantiate backplate
        GameObject backplate = menu.transform.Find("Backplate").gameObject;

        // calculate backplate scale (yscale*1 for 1 row of buttons, *2 for 2 rows of buttons, etc)
        numButtonRows = (1 + ((int)((buttons.Length - 1) / 4)));
        float newYscale = numButtonRows * backplate.transform.localScale.y;
        backplate.transform.localScale = new Vector3(backplate.transform.localScale.x, newYscale, backplate.transform.localScale.z);

        // calculate backplate shift
        float plateShiftAmount = 0.015f + 0.005f * (numButtonRows - 1);
        float newYpos = backplate.transform.localPosition.y + plateShiftAmount;
        backplate.transform.localPosition = new Vector3(backplate.transform.localPosition.x, newYpos, backplate.transform.localPosition.z);
    }

    void FormatButtons()
    {
        // format buttons
        GameObject buttonCollection = menu.transform.Find("ButtonCollection").gameObject;
        buttonCollection.transform.localPosition = new Vector3(0f, .02f * numButtonRows, -.01f);

        // create button GameObjects on the menu. These should be dynamically created based on the buttons defined in the inspector
        for (int i = 0; i < buttons.Length; i++)
        {
            // attach button as child object of the button collection on the menu
            // dynamically position buttons on the menu
            GameObject newButton = Instantiate(settingsMenuButtonprefab, Vector3.zero, Quaternion.identity);
            newButton.transform.parent = buttonCollection.transform;
            newButton.transform.localPosition = new Vector3(.03f * (i % 4), -.03f * ((int)(i / 4)), 0f);
            newButton.transform.localRotation = Quaternion.Euler(Vector3.zero);
            newButton.transform.localScale = new Vector3(1, 1, 1);
            // fill in the text displayed on the button
            GameObject iconandtext = newButton.transform.Find("IconAndText").gameObject;
            TextMeshPro textmesh = iconandtext.transform.Find("TextMeshPro").GetComponent<TextMeshPro>();

            // assign function to the button
            SettingsMenuButton t = buttons[i];
            SettingsMenuButtonController buttonController = newButton.GetComponent<SettingsMenuButtonController>();
            buttonController.SetButtonType(t, transform);

            if (t.type == SettingsType.DataChannel)
            {
                textmesh.SetText(t.text);
            }
            else if (t.type == SettingsType.RenameTooltip)
            {
                // fill in the text displayed on the button
                textmesh.SetText("RENAME");
                textmesh.fontSize = .06f;
            }
            else if (t.type == SettingsType.MoveTooltipAnchor)
            {
                // fill in the text displayed on the button
                textmesh.SetText("ANCHOR");
                textmesh.fontSize = .06f;
            }
        }
    }
}
